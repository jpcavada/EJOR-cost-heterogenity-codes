aggregate(d1Samp$nomComuna, by=list(d1Samp$nomComuna), FUN=length)
View(d1Samp)
q2 <-"select nomComuna, idCom as place, direccion, razonSocial, dayofCall, weekofCall, monthofCall, weekday, (serviceTime*60) as serviceTime from raw_data where monthofCall = 4 and weekofCall=15 and dayofCall=8 and (nomComuna = 'Vitacura' or nomComuna = 'Las Condes' or nomComuna='Santiago' or idCom=20 or nomComuna = 'Providencia') and serviceTime != 0 order by rand() limit 25"
d2Samp <- dbGetQuery(con, q2)
aggregate(d2Samp$nomComuna, by=list(d2Samp$nomComuna), FUN=length)
q2 <-"select nomComuna, idCom as place, direccion, razonSocial, dayofCall, weekofCall, monthofCall, weekday, (serviceTime*60) as serviceTime from raw_data where monthofCall = 4 and weekofCall=15 and dayofCall=8 and (nomComuna = 'Vitacura' or nomComuna = 'Las Condes' or nomComuna='Santiago' or idCom=20 or nomComuna = 'Providencia') and serviceTime != 0 order by rand() limit 25"
d2Samp <- dbGetQuery(con, q2)
aggregate(d2Samp$nomComuna, by=list(d2Samp$nomComuna), FUN=length)
aggregate(d1Samp$nomComuna, by=list(d1Samp$nomComuna), FUN=length)
#d1 <- subset(df, dayofCall==7)
d2 <- subset(df, dayofCall==8)
#d1 <- subset(df, dayofCall==7)
d2 <- subset(df, dayofCall==8)
#d1 <- subset(df, dayofCall==7)
d2 <- subset(df, dayofCall==8)
#Número de llamadas durante el mes.
dat <- tabulate(df$dayofCall)
#Número de llamadas durante el mes.
tabulate(df$dayofCall)
#Número de llamadas durante el mes.
tabulate(df$weekday)
rm(list=ls())
graphics.off()
options(digits = 3)
library("DBI")
library("RMySQL")
rm(list=ls())
graphics.off()
options(digits = 3)
library("DBI")
library("RMySQL")
con <-dbConnect(RMySQL::MySQL(),
dbname = "xeroxdb",
host = "192.168.0.13",
port = 3306,
user = "root",
password = "Colonus1502")
dbDisconnect(con)
con <-dbConnect(RMySQL::MySQL(),
dbname = "xeroxdb",
host = "localhost",
port = 3306,
user = "root",
password = "Colonus1502")
data <- dbReadTable(con, "raw_data")
dbDisconnect(con)
con <-dbConnect(RMySQL::MySQL(),
dbname = "xeroxdb",
host = "192.168.0.13",
port = 3306,
user = "root",
password = "Colonus1502")
dbWriteTable(con, value = data, name = "raw_data", append = TRUE )
dbDisconnect(con)
con <-dbConnect(RMySQL::MySQL(),
dbname = "xeroxdb",
host = "192.168.0.13",
port = 3306,
user = "root",
password = "Colonus1502")
dbWriteTable(con, value = data, name = "raw_data", append = TRUE )
dbWriteTable(con, value = data, name = "raw_data", append = TRUE, row.names=FALSE )
install.packages("googlesheets")
gs_ls()
library('googlesheets')
gs_ls()
Penalty.Xerox...baseInst.100 <- read.csv("~/Downloads/Penalty-Xerox - baseInst-100.csv")
View(Penalty.Xerox...baseInst.100)
baseInst100 <- read.csv("~/Downloads/Penalty-Xerox - baseInst-100.csv")
View(baseInst100)
View(baseInst100)
baseInst100 <- read.csv("~/Downloads/Penalty-Xerox - baseInst-100.csv")
######
######
#Construccion de Escenarios
#Entrega lista de clientes de la semana estudiada.
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
p <- data.frame(rep(28800, N))
penalty <- rlnorm(249, mean=log(2880), sdlog=1)
hist(penalty)
penalty <- rlnorm(249, mean=log(28800), sdlog=log(2880))
penalty <- rlnorm(249, mean=log(28800), sdlog=log(2880))
penalty <- rlnorm(249, mean=log(28800), sdlog=log(2880))
penalty <- rlnorm(249, mean=log(28800), sdlog=log(288))
penalty <- rlnorm(249, mean=log(28800), sdlog=log(288))
penalty <- rlnorm(249, mean=log(28800), sdlog=log(288))
penalty <- rlnorm(249, mean=log(28800), sd=log(288))
penalty <- rlnorm(249, mean=log(28800), sd=log(2880))
hist(penalty)
mean(penalty)
penalty <- rlnorm(249, mean=log(28800), sd=log(280))
penalty <- rlnorm(249, mean=log(28800), sd=log(1))
penalty <- rlnorm(249, mean=log(28800), sd=log(1))
penalty <- rlnorm(249, mean=log(28800), sd=log(1.01))
penalty <- rlnorm(249, mean=log(28800), sd=log(1.01))
mean(penalty)
penalty <- rlnorm(249, mean=log(28800), sd=log(1.001))
penalty <- rlnorm(249, mean=log(28800), sd=log(1.001))
mean(penalty)
penalty <- rlnorm(249, mean=log(28800), sd=log(1.1))
penalty <- rlnorm(249, mean=log(28800), sd=log(1.1))
mean(penalty)
mean(penalty)
hist(penalty)
E <- function(mu,sigma){
aux <- mu+0.5*sima^2
return(exp(aux))
}
penalty <- rlnorm(249, mean=2*log(28800), sd=1)
hist(penalty)
mean(penalty)
aux <- 28800 + 0.5*1
aux <- exp(28800 + 0.5*1)
aux <- exp(500 + 0.5*1)
penalty <- rlnorm(249, mean=log(28800), sd=1.01)
penalty <- rlnorm(249, mean=log(28800), sd=1.01)
hist(penalty)
penalty <- rlnorm(249, mean=log(28800), sd=1.001)
hist(penalty)
E <- function(mu,sigma){
aux <- mu+0.5*sima^2
return(exp(aux))
}
penalty <- norm(249, mean=28800, sd=2880)
penalty <- rnorm(249, mean=28800, sd=2880)
hist(penalty)
penalty <- rnorm(249, mean=28800, sd=1000)
hist(penalty)
penalty <- rnorm(249, mean=28800, sd=900)
hist(penalty)
penalty <- rnorm(249, mean=28800, sd=100)
hist(penalty)
penalty <- rnorm(249, mean=28800, sd=500)
hist(penalty)
e_multa <- 28800
mu_multa <- 28800
sd_multa <- mu_multa*0.1
penalty <- rnorm(249, mean=mu_multa, sd=sd_multa)
mu_multa <- 28800
sd_multa <- mu_multa*0.05
penalty <- rnorm(249, mean=mu_multa, sd=sd_multa)
hist(penalty)
mu_multa <- 28800
sd_multa <- mu_multa*0.25
penalty <- rnorm(249, mean=mu_multa, sd=sd_multa)
hist(penalty)
sd_multa <- mu_multa*0.30
mu_multa <- 28800
sd_multa <- mu_multa*0.30
penalty <- rnorm(249, mean=mu_multa, sd=sd_multa)
hist(penalty)
abs(penalty)
hist(abs(penalty)
hist(abs(penalty))
library(ggplot2)
theme_set(theme_classic())
# Plot
qplot(penalty, geom="histogram")
ggplot(aes(penalty)) + geom_histogram()
penalty <-data.frame(penalty)
ggplot(data=penalty, aes(penalty$penalty)) + geom_histogram()
ggplot(data=penalty, aes(penalty$penalty)) + geom_histogram()
df <- data.frame(penalty)
ggplot(data=df, aes(df$penalty)) + geom_histogram()
c = 3 # Número de servidores
lambda = 9.8 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# Mean time customers spend in the system
W = W_q + 1 / mu
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 9.8 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 9.8 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
c = 3 # Número de servidores
lambda = 8.48 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
c = 2 # Número de servidores
lambda = 8.48 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
c = 3 # Número de servidores
lambda = 8.04 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 8.04 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 3 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 3 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
rm(list=ls())
graphics.off()
options(digits = 3)
setwd("~/Gitlab/xerox-paper/R-Code/InstanceGen")
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
mu <- 21600
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.5))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
custData <- cbind(custList[,1], p, p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial','p', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
ins2 <-merge(baseInst100,custData, by='razonSocial')
View(ins2)
write.csv(ins2, file="/home/juano/Gitlab/xerox-Paper/Data/ins2.csv")
write.csv(ins2, file="~/Gitlab/xerox-Paper/Data/ins2.csv")
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
rm(list=ls())
graphics.off()
options(digits = 3)
setwd("~/Gitlab/xerox-paper/R-Code/InstanceGen")
setwd("~/Gitlab/xerox-paper/R-Code/InstanceGen")
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
mu <- 21600
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
custData <- cbind(custList[,1], p, p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial','p', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
ins2 <-merge(baseInst100,custData, by='razonSocial')
write.csv(ins2, file="/home/juano/Gitlab/xerox-Paper/Data/ins2.csv")
write.csv(ins2, file="~/Gitlab/xerox-Paper/Data/ins2.csv")
View(ins2)
write.csv(ins2, file="~/Gitlab/xerox-Paper/Data/ins2.csv")
