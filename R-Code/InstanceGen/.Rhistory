}
damage(5,0.7)
damage(5,0.9)
damage(5,0.99)
damage(6,0.99)
damage(7,0.99)
damage(1,0.99)
damage(2,0.99)
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return(100000)
}
}
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return(100000)
}
}
damage(5,0.5)
damage(5,0.5)
damage(1,0.5)
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return(100000)
}
}
?'if'
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
}
if (c=1) {
return(100000)
}
}
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} if (c=1) {
return(100000)
}
}
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return(100000)
}
}
damage(1,0.6)
Ts <- function(c,p) {
# c -> Número de servidores
# utilización: p = lambda / (c * mu)
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
return(W)
}
totalPages <-function(c, p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
return(lambda*60*8)
}
damage(1,0.6)
damage <- function(c,p) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
if (c>1) {
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return("inf")
}
}
damage <- function(c,p) {
if (c>1) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts(c-1,p)
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return("inf")
}
}
damage(1,0.6)
damage(1,0.7)
damage(-1,0.7)
damage(2,0.7)
damage(3,0.7)
rm(list=ls())
graphics.off()
options(digits = 3)
setwd("~/Gitlab/xerox-paper/R-Code/InstanceGen")
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
rnorm(N, mean = 20, sd=1)
N <- 400
rnorm(N, mean = 20, sd=1)
rnorm(N, mean = 20, sd=5)
rnorm(N, mean = 20, sd=10)
N <- 400
rnorm(N, mean = 15, sd=10)
round(abs(rnorm(N, mean = 15, sd=10)))
c <- round(abs(rnorm(N, mean = 15, sd=10)))
hist(c)
c <- round(abs(rnorm(N, mean = 10, sd=10)))
hist(c)
c <- rpois(N, lambda=10)
hist(c)
N <- 400
c <- rpois(N, lambda=20)
hist(c)
p <- runif(N, min = 0, max = 1)
c <- data.frame(rpois(N, lambda=20))
p <- data.frame(runif(N, min = 0, max = 1))
View(c)
c[1]
c[,1]
c[1,1]
c[2,1]
dmge <- c()
dmge <- c()
for (i in 1:N) {
d <- damage(c[i,1],p[i,1])
append(dmge, d)
}
d <- damage(c[,1],p[,1])
View(d)
d <- Ts(c[,1],p[,1])
d <- Ts(c[,1],p[,1])
View(d)
hist(d)
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
?'append'
c
c[1]
c[2]
c[3]
c[4]
d <- Ts(c,p)
Ts(18,0.83)
Ts(23,0.1132)
d <- Ts(c,p)-Ts(c-1,p)
d <- abs(Ts(c,p)-Ts(c-1,p))
d <- Ts(c,p)
Ts(18,0.8352)
d <-c()
for (i in 1:N) {
}
d <-c()
for (i in 1:N) {
foo <-damage(c[i],p[i])
d <-append(d,foo)
}
tsistem <-()
tsistem <- c()
tsystem <- c()
d <-c()
tsystem <- c()
for (i in 1:N) {
foo <-damage(c[i],p[i])
foo2 <-Ts(c[i],p[i])
tsystem <- append(tsystem,foo2)
d <-append(d,foo)
}
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 400
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
tsystem <- c()
for (i in 1:N) {
foo <-damage(c[i],p[i])
foo2 <-Ts(c[i],p[i])
tsystem <- append(tsystem,foo2)
d <-append(d,foo)
}
View(d)
damage <- function(c,p) {
if (c>1) {
Tsistem <- Ts(c,p)
Tsistem_1 <- Ts((c-1),p)
dmg <- abs(Tsistem-Tsistem_1)
return(dmg)
} else {
return("inf")
}
}
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 400
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
tsystem <- c()
for (i in 1:N) {
foo <-damage(c[i],p[i])
foo2 <-Ts(c[i],p[i])
tsystem <- append(tsystem,foo2)
d <-append(d,foo)
}
damage <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
tsystem = Ts(c,p)
}
Ts <- function(c,p) {
# c -> Número de servidores
# utilización: p = lambda / (c * mu)
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
return(W)
}
damage <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
tsystem = Ts(c,p)
return(tsystem)
}
Ts(3,0.9)
Ts_1 <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
tsystem = Ts(c,p)
return(tsystem)
}
Ts_1(3,0.9)
Ts_1 <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
if (p>1) {
return("inf")
} else {
tsystem = Ts(c,p)
return(tsystem)
}
}
Ts(5,0.9)
Ts_1(5,0.9)
Ts_1(5,0.8)
Ts(5,0.8)
Ts_1(5,0.8)
Ts_1 <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
if (p>1) {
return("inf")
} else {
tsystem <- Ts(c,p)
return(tsystem)
}
}
Ts_1(5,0.8)
Ts_1(100,0.8)
Ts_1(6,0.8)
Ts_1(7,0.8)
Ts_1(1,0.8)
Ts_1(2,0.8)
Ts_1(3,0.8)
Ts_1(3,0.8)
Ts_1(4,0.8)
Ts_1(5,0.8)
Ts_1(6,0.8)
Ts_1(8,0.8)
mu = 4
lamda = 0.8
lamda = 0.8 * (5*mu)
p = lamda / 5*4
lamda = 0.8 * (6*mu)
p = lamda / 6*4
p = lamda / 6*4
p <- lamda / 6*4
p <- lamda / 7*4
p <- lamda / 5*4
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
c=5
p = 0.8
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
Ts(c,p)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
Ts_1 <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
if (p>=1) {
return("inf")
} else {
tsystem <- Ts(c,p)
return(tsystem)
}
}
Ts <- function(c,p) {
# c -> Número de servidores
# utilización: p = lambda / (c * mu)
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
return(W)
}
totalPages <-function(c, p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
return(lambda*60*8)
}
Ts_1 <- function(c,p) {
mu = 4 # Tasa de Servicio: 4 pag/min
lambda = p * (c * mu)
p = lambda / ((c-1) * mu)
if (p>=1) {
return("inf")
} else {
tsystem <- Ts(c,p)
return(tsystem)
}
}
Ts(5,0.8)
Ts_1(5,0.8)
Ts_1(6,0.8)
Ts_1(20,0.8)
Ts(20,0.8)
Ts(15,0.8)
Ts_1(15,0.8)
abs(Ts(15,0.8)-Ts_1(15,0.8))
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 400
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
for (i in 1:N) {
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
View(d)
d <-c()
for (i in 1:N) {
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
?ls
rm(ls(foo))
rm(ls("foo"))
rm(list=ls("foo"))
rm(list=ls(foo))
?rm
rm(foo)
d <-c()
for (i in 1:N) {
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
numeric(d)
d <- data.frame(d)
View(d)
pgs <- c()
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
d <- data.frame(d)
pgs <-data.frame(pgs)
View(d)
View(pgs)
hist(d)
21600/8
2700/60
custData <- cbind(custList[,1], d, pgs)
colnames(custData) <- c('razonSocial','damage', 'pages')
N <- 249
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
pgs <-data.frame(pgs)
custData <- cbind(custList[,1], d, pgs)
colnames(custData) <- c('razonSocial','damage', 'pages')
View(custData)
Ts(27,0.1135)
Ts_1(27,0.1135)
