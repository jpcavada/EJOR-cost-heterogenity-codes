
option display_1col 200;

#Define un parametro Times_ij, indica el tiempo de viaje entre i e j.
for {i in nodes}{
	for {j in nodes}{
		let times[i,j] := t_cost[place[i],place[j]];
	}
}

#Dar una solucion inicial.
param k;
param k_1;
param tcol;
param sv;

let R:= 1..C;
for {r in R}{
	for {i in 1..C}{
		if i=r then{
			let aa[i,r] := 1;
		} else {
			let aa[i,r] := 0;
		}
	}
}

for {r in n_col_ini} {
	let R := R union {C+r};
	let {j in I2} a[j] :=0;


	for{l in L} {
		 let k := col_ini[r,l];
		 let a[k] := 1;
	}


	let {i in I2} aa[i,C+r] := a[i];
}

#Agrego los costos de cada ruta.
for {r in R} {
	 if r<=C then {

	 	let c[r] := 0;
		let delay[r]:= 0;
		let travel[r] := 0;
	 }
	 else {
		let tcol := 0;
		let sv:= 0;
		for {l in 1..Lcap-1} {
			if l=4 then {
				let k := col_ini[r-C,l];
				let k_1 := col_ini[r-C,l+1];


				let tcol := tcol + times[k,k_1];
				let sv:= sv + service[k] + service[k_1];
			}
			else {
				let k := col_ini[r-C,l];
				let k_1 := col_ini[r-C,l+1];


				let tcol := tcol + times[k,k_1];
				let sv := sv + service[k];
			}
		}


		let c[r] := distanceCost*tcol + delayCost*max(0,sv+tcol-480);
		let travel[r] := distanceCost*tcol;
		let delay[r] :=  delayCost*max(0,sv+tcol-480);
	}
}

problem MP: x, vi, fo1, fo2, MasterProb, res0, fo1res, fo2res, res1;
option solver './cplex';
option cplex_options 'mipdisplay=2 mipgap 0.01';
option presolve 0;

problem SP: s, w, d, a, t, SubProb, aux, allDifferents, init, timing1, timing2, timing3,timing4, second, res22, aCol1, aCol2, res28, res29;
option solver './ilogcp';
#option ilogcp_options 'branchlimit=35000';
option ilogcp_options 'branchlimit=100000 optimizer=auto outlev=terse';

param col;
let col:=C+n_cols;

repeat {
	print "############ITERACION " & col - n_cols +1 & "###################";
	print "Iter " & col - n_cols +1 >> (Out);
	#relajo las variables del problema maestro.
	let {i in R} x[i].relax := 1;
    let {i in I2} vi[i].relax := 1;

	solve MP;
	display MasterProb >> (Out);
	let col := col+1;

 	let {i in I2} pi[i] := res0[i].dual;
	let mu := res1.dual;

	#display vi >> (Out) ;
	#display x >> (Out);
	#display pi >> (Out);
	#display mu >> (Out);

	solve SP;

	display s, SubProb, d    >> (Out);
	display distanceCost*sum{l in 1..Lcap-1} t[l] >> (Out);

	let R := R union {col};
    let c[col] := delayCost*d + distanceCost*sum {l in 1..4} t[l];
	 let delay[col] := delayCost*d;
	 let travel[col] := distanceCost*sum {l in 1..4} t[l];


    let {i in I2} aa[i,col] := a[i];

	if SubProb >= -0.01 then {
		break;
	}
}

let {i in R} x[i].relax := 0;
let {i in I2} vi[i].relax := 0;
solve MP;

print "Problema Entero" >> (Out);
display MasterProb  >> (Out);
display fo1, fo2 >> (Out);
display {j in R: x[j] > 0} x[j] >> (Out);
display {i in I2, j in R: x[j] = 1} aa[i,j]  >> (Out);
display {i in I2: vi[i]=1} vi[i]  >> (Out);

display {i in R: x[i] =1} (x[i], c[i], travel[i], delay[i]) >> (Out);
