if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 3 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
c = 2 # Número de servidores
lambda = 6.72 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 3 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
c = 2 # Número de servidores
lambda = 6.43 # Tasa de llegada
mu = 4 # Tasa de Servicio
# utilización
p = lambda / (c * mu)
# cero clientes en el sistema
i = c(0:(c-1))
first = sum( (c * p) ^ i / factorial(i) )
p_0 = 1 / ( first + (c * p) ^ c / ( factorial(c) * (1-p) ) )
# n clientes en el sistema
p_n = function(p_0, c, p, n){
if( n <= c){ return( p_0 * ( (c*p)^n / factorial(n)) ) }
else return( p_0 * ( c^c * p^n) / factorial(c) )
}
p_n(p_0, c, p, 6)
# the mean number of customers waiting in queue
L_q = p_0 * ( ((c^c) * p^(c+1)) / (factorial(c) * (1-p)^2) )
# Mean time customers spend in queue
W_q = L_q / lambda
# Mean time customers spend in the system
W = W_q + 1 / mu
# Mean number of customers in system
L = L_q + lambda / mu
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
View(baseInst100)
N <- 249
mu <- 32400
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
custData <- cbind(custList[,1], p, p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial','p', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
ins3 <-merge(baseInst100,custData, by='razonSocial')
write.csv(ins3, file="~/Gitlab/xerox-Paper/Data/ins3.csv")
N <- 249
mu <- 10800
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
custData <- cbind(custList[,1], p, p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial','p', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
ins4 <-merge(baseInst100,custData, by='razonSocial')
write.csv(ins4, file="~/Gitlab/xerox-Paper/Data/ins4.csv")
View(ins3)
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
pgs <-data.frame(pgs)
custData <- cbind(custList[,1], d, pgs)
colnames(custData) <- c('razonSocial','damage', 'pages')
View(baseInst100)
View(custData)
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
mu <- 21600
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$serviceTime), FUN = mean )
warning()
warnings()
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$serviceTime), FUN = mean )
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$serviceTime), FUN = mean)
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$serviceTime), FUN = mean )
View(custList)
custList <- aggregate(baseInst100$serviceTime, by=list(baseInst100$razonSocial), FUN = mean )
View(custList)
custList <- sort(custList$x)
custList <- aggregate(baseInst100$serviceTime, by=list(baseInst100$razonSocial), FUN = mean)
custList <- sort(custList)
?order
custList <- order(custList$x)
View(baseInst100)
custList <- order(custList)
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$serviceTime, by=list(baseInst100$razonSocial), FUN = mean)
custList[order(custList$x)]
order(custList$x)
sort(custList$x)
tservice <- sort(custList$x)
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$serviceTime, by=list(baseInst100$razonSocial), FUN = mean)
tservice <- sort(custList$x)
N <- 249
mu <- 21600
p <- data.frame(rep(mu, N))
p05 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.05)))
p10 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.1)))
p20 <- data.frame(sort(rnorm(N, mean = mu, sd = mu*0.2)))
p25 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.25))))
p15 <- data.frame(sort(abs(rnorm(N, mean = mu, sd = mu*0.15))))
p50 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu*0.50))))
p100 <- data.frame(sort(abs(rnorm(N, mean = mu, sd =mu))))
View(baseInst100)
custData <- cbind(custList[,1], tservice, p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial','serviceTime', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
View(custData)
ins5 <-merge(baseInst100,custData, by='razonSocial')
write.csv(ins5, file="~/Gitlab/xerox-Paper/Data/ins5.csv")
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- rpois(N, lambda=20)
p <- runif(N, min = 0, max = 1)
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
pgs <-data.frame(pgs)
custData <- cbind(custList[,1], d, pgs)
colnames(custData) <- c('razonSocial','damage', 'pages')
View(custData)
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
View(insMarkov_1)
View(totalPages)
View(Ts_1)
View(Ts)
write.csv(insMarkov_1, file="~/Gitlab/xerox-Paper/Data/insMarkov_1.csv")
View(insMarkov_1)
custData <- cbind(custList[,1],c , p, d, pgs)
colnames(custData) <- c('razonSocial','c','p','damage', 'pages')
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
View(insMarkov_1)
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
write.csv(insMarkov_1, file="~/Gitlab/xerox-Paper/Data/insMarkov_1.csv")
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- runif(N, min=1, max =5)
p <- runif(N, min = 0.25, max=0.75)
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- runif(N, min=1, max =5)
p <- runif(N, min = 0.25, max=0.75)
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
pgs <-data.frame(pgs)
custData <- cbind(custList[,1],c , p, d, pgs)
colnames(custData) <- c('razonSocial','c','p','damage', 'pages')
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
write.csv(insMarkov_1, file="~/Gitlab/xerox-Paper/Data/insMarkov_1.csv")
View(insMarkov_1)
floor(2.1)
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- floor(runif(N, min=1, max =5))
p <- runif(N, min = 0.25, max=0.75)
d <-c()
pgs <- c()
for (i in 1:N) {
pgs <- append(pgs,totalPages(c[i],p[i]))
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
pgs <-data.frame(pgs)
custData <- cbind(custList[,1],c , p, d, pgs)
colnames(custData) <- c('razonSocial','c','p','damage', 'pages')
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
View(insMarkov_1)
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- floor(runif(N, min=1, max =5))
p <- runif(N, min = 0.25, max=0.75)
d <-c()
for (i in 1:N) {
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
custData <- cbind(custList[,1],c , p, d)
colnames(custData) <- c('razonSocial','c','p','damage')
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
View(insMarkov_1)
source("~/Gitlab/xerox-paper/R-Code/Markov/markov-functions.R")
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
c <- floor(runif(N, min=1, max =5))
p <- runif(N, min = 0.25, max=0.75)
d <-c()
for (i in 1:N) {
if (Ts_1(c[i],p[i])!="inf") {
foo <- abs(Ts(c[i],p[i])-Ts_1(c[i],p[i]))
d <- append(d,foo)
} else {
d <- append(d,"inf")
}
}
rm(foo)
rm(i)
d <- data.frame(d)
View(d)
custData <- cbind(custList[,1],c , p, d)
View(custData)
colnames(custData) <- c('razonSocial','c','p','damage')
View(custData)
insMarkov_1 <-merge(baseInst100,custData, by='razonSocial')
write.csv(insMarkov_1, file="~/Gitlab/xerox-Paper/Data/insMarkov_1.csv")
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
mu <- log(21600)
p10 <- data.frame(exp(sort(rnorm(N, mean = mu, sd = 0.10))))
p15 <- data.frame(exp(sort(abs(rnorm(N, mean = mu, sd = 0.15)))))
p20 <- data.frame(exp(sort(rnorm(N, mean = mu, sd = 0.20))))
p25 <- data.frame(exp(sort(abs(rnorm(N, mean = mu, sd = 0.25)))))
p30 <- data.frame(exp(sort(abs(rnorm(N, mean = mu, sd =0.30)))))
p35 <- data.frame(exp(sort(abs(rnorm(N, mean = mu, sd =0.35)))))
p40 <- data.frame(exp(sort(abs(rnorm(N, mean = mu, sd =0.4)))))
custData <- cbind(custList[,1], p10, p15, p20, p25, p30,p35,p40)
colnames(custData) <- c('razonSocial', 'p10', 'p15', 'p20', 'p25', 'p30', 'p35', 'p40')
sum(p10)
summary(p10)
summary(p40)
64561/8495
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
custList <- aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length )
N <- 249
mu <- log(32400)
p10 <- exp(sort(rnorm(N, mean = mu, sd = 0.10)))
p15 <- exp(sort(abs(rnorm(N, mean = mu, sd = 0.15))))
p20 <- exp(sort(rnorm(N, mean = mu, sd = 0.20)))
p25 <- exp(sort(abs(rnorm(N, mean = mu, sd = 0.25))))
p30 <- exp(sort(abs(rnorm(N, mean = mu, sd =0.30))))
p35 <- exp(sort(abs(rnorm(N, mean = mu, sd =0.35))))
p40 <- exp(sort(abs(rnorm(N, mean = mu, sd =0.4))))
custData <- cbind(custList[,1], p05,p10, p15, p20, p25, p50,p100)
colnames(custData) <- c('razonSocial', 'p05', 'p10', 'p15', 'p20', 'p25', 'p50', 'p100')
summary(p40)
94768/7717
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
View(baseInst100)
tabulate(baseInst100$weekday)
tabulate(baseInst100$nomComuna)
tabulate(baseInst100$place)
rm(list=ls())
graphics.off()
options(digits = 3)
setwd("~/Gitlab/xerox-paper/Data")
#Abir instancia aleatoria generada
baseInst100 <- read.csv("~/Gitlab/xerox-paper/Data/baseInst100.csv")
?aggregate
rq <-aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial))
rq <-aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial), FUN = length)
View(rq)
rq <-aggregate(baseInst100$razonSocial, by=list(baseInst100$razonSocial, baseInst100$nomComuna, baseInst100$weekday), FUN = length)
View(rq)
View(rq)
colnames(rq) <- c('razonSocial', 'comuna', 'weekday', 'llamado')
View(rq)
rq_ <- aggregate(rq$llamado, by=list(rq$comuna, rq$weekday), FUN=sum)
View(rq_)
setwd("~/Gitlab/xerox-paper/Data")
write.csv(rq_, file = 'instance_desc.csv')
rq <-aggregate(baseInst100$serviceTime, by=list(baseInst100$nomComuna, baseInst100$weekday), FUN = average)
rq <-aggregate(baseInst100$serviceTime, by=list(baseInst100$nomComuna, baseInst100$weekday), FUN = mean)
View(rq)
write.csv(rq, file = 'instance_desc_1.csv')
